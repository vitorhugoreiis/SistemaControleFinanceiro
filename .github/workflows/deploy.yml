name: Deploy

on:
  push:
    branches:
      - main      # Deploy para produ√ß√£o
      - develop   # Deploy para staging
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente para deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build das imagens Docker
  build-images:
    runs-on: ubuntu-latest
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    # Build Backend Image
    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    # Build Frontend Image
    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
    
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy para Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.seudominio.com
    
    steps:
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "Backend image: ${{ needs.build-images.outputs.backend-image }}"
        echo "Frontend image: ${{ needs.build-images.outputs.frontend-image }}"
        
        # Aqui voc√™ adicionaria os comandos reais de deploy
        # Exemplo com Docker Compose:
        # - name: Deploy with Docker Compose
        #   run: |
        #     echo "BACKEND_IMAGE=${{ needs.build-images.outputs.backend-image }}" > .env
        #     echo "FRONTEND_IMAGE=${{ needs.build-images.outputs.frontend-image }}" >> .env
        #     docker-compose -f docker-compose.staging.yml up -d
        
        # Exemplo com Kubernetes:
        # - name: Deploy to Kubernetes
        #   run: |
        #     kubectl set image deployment/backend backend=${{ needs.build-images.outputs.backend-image }}
        #     kubectl set image deployment/frontend frontend=${{ needs.build-images.outputs.frontend-image }}
        #     kubectl rollout status deployment/backend
        #     kubectl rollout status deployment/frontend
    
    - name: Run health checks
      run: |
        echo "üè• Running health checks..."
        # Adicione aqui seus health checks
        # curl -f https://staging.seudominio.com/api/health || exit 1
        # curl -f https://staging.seudominio.com/ || exit 1
    
    - name: Notify staging deployment
      run: |
        echo "‚úÖ Staging deployment completed successfully!"

  # Deploy para Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://seudominio.com
    
    steps:
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "Backend image: ${{ needs.build-images.outputs.backend-image }}"
        echo "Frontend image: ${{ needs.build-images.outputs.frontend-image }}"
        
        # Comandos de deploy para produ√ß√£o
        # Geralmente mais cuidadosos com rollback autom√°tico
    
    - name: Run health checks
      run: |
        echo "üè• Running production health checks..."
        # Health checks mais rigorosos para produ√ß√£o
    
    - name: Notify production deployment
      run: |
        echo "‚úÖ Production deployment completed successfully!"
        
        # Opcional: Notificar equipe via Slack, Discord, etc.
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"üöÄ Nova vers√£o deployada em produ√ß√£o!"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback autom√°tico em caso de falha
  rollback:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: failure()
    
    steps:
    - name: Rollback deployment
      run: |
        echo "üîÑ Iniciando rollback autom√°tico..."
        # Comandos para rollback
        # kubectl rollout undo deployment/backend
        # kubectl rollout undo deployment/frontend
    
    - name: Notify rollback
      run: |
        echo "‚ö†Ô∏è Rollback executado devido a falha no deployment!"
        # Notificar equipe sobre o rollback