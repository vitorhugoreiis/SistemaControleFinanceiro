name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  # Valida√ß√£o do Backend
  validate-backend:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: controle_financeiro_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Wait for MySQL
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P3306 -uroot -proot --silent; do
          sleep 1
        done
    
    - name: Run backend tests
      run: |
        cd backend
        mvn clean test -Dspring.profiles.active=test
    
    - name: Check code style
      run: |
        cd backend
        mvn checkstyle:check || echo "‚ö†Ô∏è Checkstyle warnings found"
    
    - name: Build backend
      run: |
        cd backend
        mvn clean compile -DskipTests

  # Valida√ß√£o do Frontend
  validate-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run linting
      run: |
        cd frontend
        npm run lint
    
    - name: Run tests
      run: |
        cd frontend
        npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: frontend-coverage
        path: frontend/coverage/
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  # An√°lise de seguran√ßa
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Coment√°rio autom√°tico no PR com resultados
  pr-comment:
    runs-on: ubuntu-latest
    needs: [validate-backend, validate-frontend, security-scan]
    if: always()
    
    steps:
    - name: Comment PR
      uses: actions/github-script@v6
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('ü§ñ Valida√ß√£o do PR')
          );
          
          const backendStatus = '${{ needs.validate-backend.result }}';
          const frontendStatus = '${{ needs.validate-frontend.result }}';
          const securityStatus = '${{ needs.security-scan.result }}';
          
          const statusIcon = (status) => {
            switch(status) {
              case 'success': return '‚úÖ';
              case 'failure': return '‚ùå';
              case 'cancelled': return '‚èπÔ∏è';
              default: return '‚ö†Ô∏è';
            }
          };
          
          const body = `ü§ñ **Valida√ß√£o do PR**
          
          | Componente | Status | Resultado |
          |------------|--------|----------|
          | Backend | ${statusIcon(backendStatus)} | ${backendStatus} |
          | Frontend | ${statusIcon(frontendStatus)} | ${frontendStatus} |
          | Seguran√ßa | ${statusIcon(securityStatus)} | ${securityStatus} |
          
          ${backendStatus === 'success' && frontendStatus === 'success' && securityStatus === 'success' 
            ? 'üéâ **Todas as valida√ß√µes passaram! PR pronto para review.**' 
            : '‚ö†Ô∏è **Algumas valida√ß√µes falharam. Verifique os logs acima.**'
          }
          
          ---
          *Atualizado automaticamente em: ${new Date().toLocaleString('pt-BR')}*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }